 	.syntax unified
 	.cpu cortex-m3
 	.thumb
 	.align 2
 	.global	iir
 	.thumb_func

@ CG2028 Assignment, Sem 2, AY 2020/21
@ (c) CG2028 Teaching Team, ECE NUS, 2021

@Register map
@R0 - N, returns y
@R1 - b
@R2 - a
@R3 - x_n
@R4 - <use(s)>
@R5 - <use(s)>
@....

iir:

	@ PUSH / save (only those) registers which are modified by your function
	PUSH {R4-R12};


	MOV R12, R0; @ R12 = N
	ADD R12, #1; @ R12 = N+1

	LDR R4, [R1], #4; @R4 = value of b[0] -> b[1]
	LDR R5, [R2]; @R5 = value of a[0]

	MUL R6, R3, R4; @x_n * b[0] and store it in R6
	UDIV R6, R6, R5; @x_n * b[0] / a[0], now R6 = y_n

	LDR R7, =y_store; @loads address at y_store into R3
	LDR R8, =x_store; @loads address at x_store into R4

loop_1:
	LDR R11, [R2, #4]!; @ R11 = a[1++]

	LDR R9, [R8], #4; @ R9 = x_store[1++]
	LDR R10, [R7], #4; @ R10 = y_store[1++]

	LDR R4, [R1], #4; @ R4 = b[1++]

	MUL R9, R4, R9;
	MUL R10, R5, R10;
	SUB R9, R9, R10;
	UDIV R10, R9, R5;
	ADD R6, R6, R10;

	SUBS R12, #1;
	BNE loop_1;


	SUB R0, R0, #1; @ counter = 4-1 = 3
	SUB R12, R0, #1; @ R12 = 3-1 = 2
loop_2:



	MOV R9, #4;
	MUL R10, R12, R9;


	ADD R8, R8, R10;
	ADD R7, R7, R10;

	STR R8, [R8, #4];
	STR R7, [R7, #4];
	SUB R12, #1; @ R12 = N-1
	SUBS R0, #1;
	BNE loop_2;

	@MOV R6, #0; @initialise j=0



@ parameter registers need not be saved.

@ write asm function body here

@ prepare value to return (y_n) to C program in R0

@ POP / restore original register values. DO NOT save or restore R0. Why?

@ return to C program
		BX	LR

@label: .word value
.equ N_MAX, 10
@.lcomm label num_bytes

const4:
	.word 2
.lcomm y_store 4*12
.lcomm x_store 4*12

